buildscript {
  ext {
    springBootVersion = '1.5.6.RELEASE'
  }
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    classpath("cz.habarta.typescript-generator:typescript-generator-gradle-plugin:1.27.339")
  }
}

apply plugin: 'cz.habarta.typescript-generator'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'checkstyle'

version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

def versions = [
  checkstyle: '8.2',
]

repositories {
  mavenCentral()
  maven { url "http://dl.bintray.com/xinra/nucleus" }
}

configurations {
  checkstyleConfig
}

dependencies {
  compile('org.springframework.boot:spring-boot-starter-aop')
  compile('org.springframework.boot:spring-boot-starter-data-jpa')
  compile('org.springframework.boot:spring-boot-starter-security')
  compile('org.springframework.boot:spring-boot-starter-web')
  runtime('org.postgresql:postgresql')
  runtime('mysql:mysql-connector-java')
  compileOnly('org.projectlombok:lombok')
  
  compile('com.xinra.nucleus:nucleus-common:0.1.1')
  compile('com.xinra.nucleus:nucleus-entity:0.1.0')
  compile('com.xinra.nucleus:nucleus-service:0.1.1')
  
  testCompile('org.springframework.boot:spring-boot-starter-test')
  testCompile('org.springframework.security:spring-security-test')
  testCompileOnly('org.projectlombok:lombok')
  testRuntime('org.hsqldb:hsqldb')
  
  checkstyleConfig("com.puppycrawl.tools:checkstyle:${versions.checkstyle}") { transitive = false }
}

generateTypeScript {
  jsonLibrary = 'jackson2'
  //classes = [
  //  ''
  //]
  classPatterns = [
    'com.xinra.reviewcommunity.dto.*'
  ]
  excludeClasses = [
    'com.xinra.nucleus.service.Dto',
    'com.xinra.reviewcommunity.dto.AuthenticatedUserDto',
    'com.xinra.reviewcommunity.dto.RegisterDto'
  ]
  //outputFileType = 'implementationFile'
  outputFile = '../client/src/client/app/modules/shared/generated/model.d.ts'
  outputKind = 'module'
  removeTypeNameSuffix = 'Dto'
}

checkstyle {
  config = resources.text.fromArchiveEntry(configurations.checkstyleConfig, 'google_checks.xml')
  toolVersion = "${versions.checkstyle}"
  showViolations = true
  maxWarnings = 0
}